name: Docker Build & Push

on:
  workflow_dispatch:
    inputs:
      image_choice:
        description: 'Choose which Docker image to build and push'
        required: true
        type: choice
        options:
          - InitialBlue
          - FinalGreen

# on:
#     push:
#         branches:
#             - dev


jobs:
    Docker-InitialBlue:
        runs-on: ubuntu-latest
        if: ${{ inputs.image_choice == 'InitialBlue' }}
        defaults:
            run:
                working-directory: "./app/initialblue/"
        permissions:
            security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
            id-token: write   # This is required for requesting the JWT

        steps:
            - name: Checkout
              uses: actions/checkout@v4


            - name: Login to AWS
              uses: aws-actions/configure-aws-credentials@v4
              with:
                role-to-assume: ${{ vars.AWS_GITHUB_ROLE_ARN }}
                role-session-name: github-actions-session
                aws-region: eu-west-2

            - name: Login to AWS ECR
              uses: aws-actions/amazon-ecr-login@v2

            - name: Build
              run: |
                docker build -t url-shortener:initialblue .
                docker tag url-shortener:initialblue ${{ vars.ECR_REGISTRY }}/url-shortener:initialblue

            - name: Trivy Scan
              uses: aquasecurity/trivy-action@master
              with:
                image-ref: url-shortener:initialblue
                severity: 'CRITICAL,HIGH'
                format: 'sarif'
                output: 'trivy-results-Docker.sarif'
                exit-code: 0   # 1 means that any vulnerabilities found, that meet the severity criteria, will raise an error and will not allow the pipeline code to continue. 0 would allow the pipeline code to continue no matter the vulnerability.
      
            - name: Upload Trivy scan results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v3
              with:
                sarif_file: 'trivy-results-Docker.sarif'
                wait-for-processing: true

            - name: Push to ECR
              run: |
                docker push ${{ vars.ECR_REGISTRY }}/url-shortener:initialblue


    Docker-FinalGreen:
        runs-on: ubuntu-latest
        if: ${{ inputs.image_choice == 'FinalGreen' }}
        defaults:
            run:
                working-directory: "./app/finalgreen/"
        permissions:
            security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
            id-token: write   # This is required for requesting the JWT

        steps:
            - name: Checkout
              uses: actions/checkout@v4


            - name: Login to AWS
              uses: aws-actions/configure-aws-credentials@v4
              with:
                role-to-assume: ${{ vars.AWS_GITHUB_ROLE_ARN }}
                role-session-name: github-actions-session
                aws-region: eu-west-2

            - name: Login to AWS ECR
              uses: aws-actions/amazon-ecr-login@v2

            - name: Build
              run: |
                docker build -t url-shortener:finalgreen .
                docker tag url-shortener:finalgreen ${{ vars.ECR_REGISTRY }}/url-shortener:finalgreen

            - name: Trivy Scan
              uses: aquasecurity/trivy-action@master
              with:
                image-ref: url-shortener:finalgreen
                severity: 'CRITICAL,HIGH'
                format: 'sarif'
                output: 'trivy-results-Docker.sarif'
                exit-code: 0   # 1 means that any vulnerabilities found, that meet the severity criteria, will raise an error and will not allow the pipeline code to continue. 0 would allow the pipeline code to continue no matter the vulnerability.
      
            - name: Upload Trivy scan results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v3
              with:
                sarif_file: 'trivy-results-Docker.sarif'
                wait-for-processing: true

            - name: Push to ECR and Get Image Digest
              id: push-and-digest
              run: |
                docker push ${{ vars.ECR_REGISTRY }}/url-shortener:finalgreen
                IMAGE_DIGEST=$(aws ecr describe-images --repository-name url-shortener --image-ids imageTag=finalgreen --query 'imageDetails[0].imageDigest' --output text)
                echo "image_digest=$IMAGE_DIGEST" >> $GITHUB_OUTPUT
                echo "FinalGreen image pushed with digest: $IMAGE_DIGEST"

            - name: Deployment Summary
              run: |
                echo "###  FinalGreen Image Ready for Blue-Green Deployment" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "**Image Digest:** \`${{ steps.push-and-digest.outputs.image_digest }}\`" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "###  Next Steps for Blue-Green Deployment:" >> $GITHUB_STEP_SUMMARY
                echo "1. Create a new task definition revision with the new image digest on the AWS Console. Note down the task definition arn from the new revision that you created" >> $GITHUB_STEP_SUMMARY
                echo "2. Use AWS CodeDeploy to perform the deployment manually on the console (Refer to \`deployment/appspectemplate.yml\` for the template needed)" >> $GITHUB_STEP_SUMMARY